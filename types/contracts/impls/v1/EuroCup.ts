/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace EuroCup {
  export type InitParamsStruct = {
    paraTToken: PromiseOrValue<string>;
    paraVToken: PromiseOrValue<string>;
    paraBToken: PromiseOrValue<string>;
    paraStableCoin: PromiseOrValue<string>;
    paraSaleStartBlock: PromiseOrValue<BigNumberish>;
    paraPlayStartBlock: PromiseOrValue<BigNumberish>;
    paraSaleFinishBlock: PromiseOrValue<BigNumberish>;
    paraPublishStartBlock: PromiseOrValue<BigNumberish>;
    paraPlayFinishBlock: PromiseOrValue<BigNumberish>;
    paraEntropy: PromiseOrValue<string>;
    paraRegulatoryAddress: PromiseOrValue<string>;
    paraBlastPointsAddress: PromiseOrValue<string>;
  };

  export type InitParamsStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    paraTToken: string;
    paraVToken: string;
    paraBToken: string;
    paraStableCoin: string;
    paraSaleStartBlock: BigNumber;
    paraPlayStartBlock: BigNumber;
    paraSaleFinishBlock: BigNumber;
    paraPublishStartBlock: BigNumber;
    paraPlayFinishBlock: BigNumber;
    paraEntropy: string;
    paraRegulatoryAddress: string;
    paraBlastPointsAddress: string;
  };
}

export interface EuroCupInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "GOVERNOR_ROLE()": FunctionFragment;
    "_entropyCallback(uint64,address,bytes32)": FunctionFragment;
    "addWhiteList(address)": FunctionFragment;
    "addressToReferralCode(address)": FunctionFragment;
    "blastPointsAddress()": FunctionFragment;
    "buyBlindBox(uint256,bytes32,bytes32)": FunctionFragment;
    "entropy()": FunctionFragment;
    "frozenBonusFlag()": FunctionFragment;
    "frozenCommissionFlag()": FunctionFragment;
    "generateReferralCode()": FunctionFragment;
    "getBonus()": FunctionFragment;
    "getCommission()": FunctionFragment;
    "getPoolFund()": FunctionFragment;
    "getPoolFundFlag()": FunctionFragment;
    "getPoolUEFA()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "haveTeamCards()": FunctionFragment;
    "initialize((address,address,address,address,uint256,uint256,uint256,uint256,uint256,address,address,address))": FunctionFragment;
    "openBlindBox()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "playFinishBlock()": FunctionFragment;
    "playStartBlock()": FunctionFragment;
    "provider()": FunctionFragment;
    "publishStartBlock()": FunctionFragment;
    "referralCodeToAddress(bytes32)": FunctionFragment;
    "regulatoryAddress()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "saleFinishBlock()": FunctionFragment;
    "saleStartBlock()": FunctionFragment;
    "setWinner(uint8)": FunctionFragment;
    "shatter(uint256[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "synthetic(uint256,bytes32)": FunctionFragment;
    "totalBonus()": FunctionFragment;
    "totalCommission()": FunctionFragment;
    "totalSaleBlindBox()": FunctionFragment;
    "unpause()": FunctionFragment;
    "whiteList(address)": FunctionFragment;
    "winner()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "GOVERNOR_ROLE"
      | "_entropyCallback"
      | "addWhiteList"
      | "addressToReferralCode"
      | "blastPointsAddress"
      | "buyBlindBox"
      | "entropy"
      | "frozenBonusFlag"
      | "frozenCommissionFlag"
      | "generateReferralCode"
      | "getBonus"
      | "getCommission"
      | "getPoolFund"
      | "getPoolFundFlag"
      | "getPoolUEFA"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "haveTeamCards"
      | "initialize"
      | "openBlindBox"
      | "pause"
      | "paused"
      | "playFinishBlock"
      | "playStartBlock"
      | "provider"
      | "publishStartBlock"
      | "referralCodeToAddress"
      | "regulatoryAddress"
      | "renounceRole"
      | "revokeRole"
      | "saleFinishBlock"
      | "saleStartBlock"
      | "setWinner"
      | "shatter"
      | "supportsInterface"
      | "synthetic"
      | "totalBonus"
      | "totalCommission"
      | "totalSaleBlindBox"
      | "unpause"
      | "whiteList"
      | "winner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOVERNOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_entropyCallback",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addWhiteList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToReferralCode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blastPointsAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyBlindBox",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "entropy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "frozenBonusFlag",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "frozenCommissionFlag",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateReferralCode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getBonus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCommission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolFundFlag",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolUEFA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "haveTeamCards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [EuroCup.InitParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "openBlindBox",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playFinishBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "provider", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publishStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralCodeToAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "regulatoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "saleFinishBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleStartBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setWinner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "shatter",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "synthetic",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBonus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCommission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSaleBlindBox",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "whiteList",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOVERNOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_entropyCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWhiteList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blastPointsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyBlindBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entropy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "frozenBonusFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "frozenCommissionFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateReferralCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolFundFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolUEFA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "haveTeamCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openBlindBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playFinishBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "provider", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralCodeToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "regulatoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleFinishBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleStartBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWinner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "shatter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "synthetic", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalBonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSaleBlindBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whiteList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;

  events: {
    "Buy(address,uint256,uint256)": EventFragment;
    "GenerateResult(uint64,address,bytes32)": EventFragment;
    "Generated(uint64)": EventFragment;
    "GetBonus(address,uint256)": EventFragment;
    "GetCommission(address,uint256)": EventFragment;
    "GetPoolFund(address,uint256)": EventFragment;
    "GetPoolUEFA(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Open(address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "ReferralCodeCreated(address,bytes32)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Shatter(address,uint256[])": EventFragment;
    "Synthetic(address,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GenerateResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Generated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetBonus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetCommission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetPoolFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GetPoolUEFA"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Open"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralCodeCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Shatter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Synthetic"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface BuyEventObject {
  account: string;
  amount: BigNumber;
  price: BigNumber;
}
export type BuyEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BuyEventObject
>;

export type BuyEventFilter = TypedEventFilter<BuyEvent>;

export interface GenerateResultEventObject {
  sequenceNumber: BigNumber;
  _providerAddress: string;
  randomNumber: string;
}
export type GenerateResultEvent = TypedEvent<
  [BigNumber, string, string],
  GenerateResultEventObject
>;

export type GenerateResultEventFilter = TypedEventFilter<GenerateResultEvent>;

export interface GeneratedEventObject {
  sequenceNumber: BigNumber;
}
export type GeneratedEvent = TypedEvent<[BigNumber], GeneratedEventObject>;

export type GeneratedEventFilter = TypedEventFilter<GeneratedEvent>;

export interface GetBonusEventObject {
  account: string;
  amount: BigNumber;
}
export type GetBonusEvent = TypedEvent<
  [string, BigNumber],
  GetBonusEventObject
>;

export type GetBonusEventFilter = TypedEventFilter<GetBonusEvent>;

export interface GetCommissionEventObject {
  account: string;
  amount: BigNumber;
}
export type GetCommissionEvent = TypedEvent<
  [string, BigNumber],
  GetCommissionEventObject
>;

export type GetCommissionEventFilter = TypedEventFilter<GetCommissionEvent>;

export interface GetPoolFundEventObject {
  account: string;
  amount: BigNumber;
}
export type GetPoolFundEvent = TypedEvent<
  [string, BigNumber],
  GetPoolFundEventObject
>;

export type GetPoolFundEventFilter = TypedEventFilter<GetPoolFundEvent>;

export interface GetPoolUEFAEventObject {
  account: string;
  amount: BigNumber;
}
export type GetPoolUEFAEvent = TypedEvent<
  [string, BigNumber],
  GetPoolUEFAEventObject
>;

export type GetPoolUEFAEventFilter = TypedEventFilter<GetPoolUEFAEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OpenEventObject {
  account: string;
  amount: BigNumber;
}
export type OpenEvent = TypedEvent<[string, BigNumber], OpenEventObject>;

export type OpenEventFilter = TypedEventFilter<OpenEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ReferralCodeCreatedEventObject {
  user: string;
  referralCode: string;
}
export type ReferralCodeCreatedEvent = TypedEvent<
  [string, string],
  ReferralCodeCreatedEventObject
>;

export type ReferralCodeCreatedEventFilter =
  TypedEventFilter<ReferralCodeCreatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface ShatterEventObject {
  account: string;
  tokenIds: BigNumber[];
}
export type ShatterEvent = TypedEvent<
  [string, BigNumber[]],
  ShatterEventObject
>;

export type ShatterEventFilter = TypedEventFilter<ShatterEvent>;

export interface SyntheticEventObject {
  account: string;
  amount: BigNumber;
  price: BigNumber;
}
export type SyntheticEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SyntheticEventObject
>;

export type SyntheticEventFilter = TypedEventFilter<SyntheticEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface EuroCup extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EuroCupInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _entropyCallback(
      sequence: PromiseOrValue<BigNumberish>,
      provider: PromiseOrValue<string>,
      randomNumber: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addWhiteList(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addressToReferralCode(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    blastPointsAddress(overrides?: CallOverrides): Promise<[string]>;

    buyBlindBox(
      amount: PromiseOrValue<BigNumberish>,
      referralCode: PromiseOrValue<BytesLike>,
      userRandomNumber: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    entropy(overrides?: CallOverrides): Promise<[string]>;

    frozenBonusFlag(overrides?: CallOverrides): Promise<[boolean]>;

    frozenCommissionFlag(overrides?: CallOverrides): Promise<[boolean]>;

    generateReferralCode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBonus(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCommission(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPoolFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPoolFundFlag(overrides?: CallOverrides): Promise<[boolean]>;

    getPoolUEFA(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    haveTeamCards(overrides?: CallOverrides): Promise<[boolean]>;

    initialize(
      params: EuroCup.InitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openBlindBox(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    playFinishBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    playStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    provider(overrides?: CallOverrides): Promise<[string]>;

    publishStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    referralCodeToAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    regulatoryAddress(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    saleFinishBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    saleStartBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    setWinner(
      winner_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shatter(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    synthetic(
      amount: PromiseOrValue<BigNumberish>,
      userRandomNumber: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalBonus(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCommission(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSaleBlindBox(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whiteList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    winner(overrides?: CallOverrides): Promise<[number]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GOVERNOR_ROLE(overrides?: CallOverrides): Promise<string>;

  _entropyCallback(
    sequence: PromiseOrValue<BigNumberish>,
    provider: PromiseOrValue<string>,
    randomNumber: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addWhiteList(
    userAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addressToReferralCode(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  blastPointsAddress(overrides?: CallOverrides): Promise<string>;

  buyBlindBox(
    amount: PromiseOrValue<BigNumberish>,
    referralCode: PromiseOrValue<BytesLike>,
    userRandomNumber: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  entropy(overrides?: CallOverrides): Promise<string>;

  frozenBonusFlag(overrides?: CallOverrides): Promise<boolean>;

  frozenCommissionFlag(overrides?: CallOverrides): Promise<boolean>;

  generateReferralCode(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBonus(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCommission(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPoolFund(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPoolFundFlag(overrides?: CallOverrides): Promise<boolean>;

  getPoolUEFA(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  haveTeamCards(overrides?: CallOverrides): Promise<boolean>;

  initialize(
    params: EuroCup.InitParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openBlindBox(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  playFinishBlock(overrides?: CallOverrides): Promise<BigNumber>;

  playStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  publishStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  referralCodeToAddress(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  regulatoryAddress(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  saleFinishBlock(overrides?: CallOverrides): Promise<BigNumber>;

  saleStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

  setWinner(
    winner_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shatter(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  synthetic(
    amount: PromiseOrValue<BigNumberish>,
    userRandomNumber: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalBonus(overrides?: CallOverrides): Promise<BigNumber>;

  totalCommission(overrides?: CallOverrides): Promise<BigNumber>;

  totalSaleBlindBox(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whiteList(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  winner(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<string>;

    _entropyCallback(
      sequence: PromiseOrValue<BigNumberish>,
      provider: PromiseOrValue<string>,
      randomNumber: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addWhiteList(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addressToReferralCode(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    blastPointsAddress(overrides?: CallOverrides): Promise<string>;

    buyBlindBox(
      amount: PromiseOrValue<BigNumberish>,
      referralCode: PromiseOrValue<BytesLike>,
      userRandomNumber: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    entropy(overrides?: CallOverrides): Promise<string>;

    frozenBonusFlag(overrides?: CallOverrides): Promise<boolean>;

    frozenCommissionFlag(overrides?: CallOverrides): Promise<boolean>;

    generateReferralCode(overrides?: CallOverrides): Promise<string>;

    getBonus(overrides?: CallOverrides): Promise<void>;

    getCommission(overrides?: CallOverrides): Promise<void>;

    getPoolFund(overrides?: CallOverrides): Promise<void>;

    getPoolFundFlag(overrides?: CallOverrides): Promise<boolean>;

    getPoolUEFA(overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    haveTeamCards(overrides?: CallOverrides): Promise<boolean>;

    initialize(
      params: EuroCup.InitParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    openBlindBox(overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    playFinishBlock(overrides?: CallOverrides): Promise<BigNumber>;

    playStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    provider(overrides?: CallOverrides): Promise<string>;

    publishStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    referralCodeToAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    regulatoryAddress(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    saleFinishBlock(overrides?: CallOverrides): Promise<BigNumber>;

    saleStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setWinner(
      winner_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    shatter(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    synthetic(
      amount: PromiseOrValue<BigNumberish>,
      userRandomNumber: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBonus(overrides?: CallOverrides): Promise<BigNumber>;

    totalCommission(overrides?: CallOverrides): Promise<BigNumber>;

    totalSaleBlindBox(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    whiteList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    winner(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    "Buy(address,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      price?: PromiseOrValue<BigNumberish> | null
    ): BuyEventFilter;
    Buy(
      account?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      price?: PromiseOrValue<BigNumberish> | null
    ): BuyEventFilter;

    "GenerateResult(uint64,address,bytes32)"(
      sequenceNumber?: null,
      _providerAddress?: null,
      randomNumber?: null
    ): GenerateResultEventFilter;
    GenerateResult(
      sequenceNumber?: null,
      _providerAddress?: null,
      randomNumber?: null
    ): GenerateResultEventFilter;

    "Generated(uint64)"(sequenceNumber?: null): GeneratedEventFilter;
    Generated(sequenceNumber?: null): GeneratedEventFilter;

    "GetBonus(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): GetBonusEventFilter;
    GetBonus(
      account?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): GetBonusEventFilter;

    "GetCommission(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): GetCommissionEventFilter;
    GetCommission(
      account?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): GetCommissionEventFilter;

    "GetPoolFund(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): GetPoolFundEventFilter;
    GetPoolFund(
      account?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): GetPoolFundEventFilter;

    "GetPoolUEFA(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): GetPoolUEFAEventFilter;
    GetPoolUEFA(
      account?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): GetPoolUEFAEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Open(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): OpenEventFilter;
    Open(
      account?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): OpenEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ReferralCodeCreated(address,bytes32)"(
      user?: PromiseOrValue<string> | null,
      referralCode?: null
    ): ReferralCodeCreatedEventFilter;
    ReferralCodeCreated(
      user?: PromiseOrValue<string> | null,
      referralCode?: null
    ): ReferralCodeCreatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Shatter(address,uint256[])"(
      account?: PromiseOrValue<string> | null,
      tokenIds?: PromiseOrValue<BigNumberish>[] | null
    ): ShatterEventFilter;
    Shatter(
      account?: PromiseOrValue<string> | null,
      tokenIds?: PromiseOrValue<BigNumberish>[] | null
    ): ShatterEventFilter;

    "Synthetic(address,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      price?: PromiseOrValue<BigNumberish> | null
    ): SyntheticEventFilter;
    Synthetic(
      account?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      price?: PromiseOrValue<BigNumberish> | null
    ): SyntheticEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _entropyCallback(
      sequence: PromiseOrValue<BigNumberish>,
      provider: PromiseOrValue<string>,
      randomNumber: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addWhiteList(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addressToReferralCode(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blastPointsAddress(overrides?: CallOverrides): Promise<BigNumber>;

    buyBlindBox(
      amount: PromiseOrValue<BigNumberish>,
      referralCode: PromiseOrValue<BytesLike>,
      userRandomNumber: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    entropy(overrides?: CallOverrides): Promise<BigNumber>;

    frozenBonusFlag(overrides?: CallOverrides): Promise<BigNumber>;

    frozenCommissionFlag(overrides?: CallOverrides): Promise<BigNumber>;

    generateReferralCode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBonus(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCommission(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPoolFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPoolFundFlag(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolUEFA(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    haveTeamCards(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      params: EuroCup.InitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openBlindBox(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    playFinishBlock(overrides?: CallOverrides): Promise<BigNumber>;

    playStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    provider(overrides?: CallOverrides): Promise<BigNumber>;

    publishStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    referralCodeToAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    regulatoryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    saleFinishBlock(overrides?: CallOverrides): Promise<BigNumber>;

    saleStartBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setWinner(
      winner_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shatter(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    synthetic(
      amount: PromiseOrValue<BigNumberish>,
      userRandomNumber: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalBonus(overrides?: CallOverrides): Promise<BigNumber>;

    totalCommission(overrides?: CallOverrides): Promise<BigNumber>;

    totalSaleBlindBox(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whiteList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _entropyCallback(
      sequence: PromiseOrValue<BigNumberish>,
      provider: PromiseOrValue<string>,
      randomNumber: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addWhiteList(
      userAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addressToReferralCode(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blastPointsAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyBlindBox(
      amount: PromiseOrValue<BigNumberish>,
      referralCode: PromiseOrValue<BytesLike>,
      userRandomNumber: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    entropy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frozenBonusFlag(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    frozenCommissionFlag(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateReferralCode(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBonus(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCommission(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPoolFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPoolFundFlag(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolUEFA(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    haveTeamCards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      params: EuroCup.InitParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openBlindBox(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playFinishBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playStartBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publishStartBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralCodeToAddress(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    regulatoryAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    saleFinishBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleStartBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setWinner(
      winner_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shatter(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    synthetic(
      amount: PromiseOrValue<BigNumberish>,
      userRandomNumber: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalBonus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCommission(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSaleBlindBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whiteList(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
