/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IBlastInterface extends utils.Interface {
  functions: {
    "claimAllGas(address,address)": FunctionFragment;
    "claimAllYield(address,address)": FunctionFragment;
    "claimGas(address,address,uint256,uint256)": FunctionFragment;
    "claimGasAtMinClaimRate(address,address,uint256)": FunctionFragment;
    "claimMaxGas(address,address)": FunctionFragment;
    "claimYield(address,address,uint256)": FunctionFragment;
    "configure(uint8,uint8,address)": FunctionFragment;
    "configureAutomaticYield()": FunctionFragment;
    "configureAutomaticYieldOnBehalf(address)": FunctionFragment;
    "configureClaimableGas()": FunctionFragment;
    "configureClaimableGasOnBehalf(address)": FunctionFragment;
    "configureClaimableYield()": FunctionFragment;
    "configureClaimableYieldOnBehalf(address)": FunctionFragment;
    "configureContract(address,uint8,uint8,address)": FunctionFragment;
    "configureGovernor(address)": FunctionFragment;
    "configureGovernorOnBehalf(address,address)": FunctionFragment;
    "configureVoidGas()": FunctionFragment;
    "configureVoidGasOnBehalf(address)": FunctionFragment;
    "configureVoidYield()": FunctionFragment;
    "configureVoidYieldOnBehalf(address)": FunctionFragment;
    "readClaimableYield(address)": FunctionFragment;
    "readGasParams(address)": FunctionFragment;
    "readYieldConfiguration(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimAllGas"
      | "claimAllYield"
      | "claimGas"
      | "claimGasAtMinClaimRate"
      | "claimMaxGas"
      | "claimYield"
      | "configure"
      | "configureAutomaticYield"
      | "configureAutomaticYieldOnBehalf"
      | "configureClaimableGas"
      | "configureClaimableGasOnBehalf"
      | "configureClaimableYield"
      | "configureClaimableYieldOnBehalf"
      | "configureContract"
      | "configureGovernor"
      | "configureGovernorOnBehalf"
      | "configureVoidGas"
      | "configureVoidGasOnBehalf"
      | "configureVoidYield"
      | "configureVoidYieldOnBehalf"
      | "readClaimableYield"
      | "readGasParams"
      | "readYieldConfiguration"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimAllGas",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllYield",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimGas",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimGasAtMinClaimRate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimMaxGas",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimYield",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configure",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configureAutomaticYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configureAutomaticYieldOnBehalf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "configureClaimableGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configureClaimableGasOnBehalf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "configureClaimableYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configureClaimableYieldOnBehalf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "configureContract",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "configureGovernor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "configureGovernorOnBehalf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "configureVoidGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configureVoidGasOnBehalf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "configureVoidYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configureVoidYieldOnBehalf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "readClaimableYield",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "readGasParams",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "readYieldConfiguration",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimAllGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAllYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimGasAtMinClaimRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimMaxGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimYield", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "configure", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "configureAutomaticYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureAutomaticYieldOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureClaimableGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureClaimableGasOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureClaimableYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureClaimableYieldOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureGovernorOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureVoidGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureVoidGasOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureVoidYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureVoidYieldOnBehalf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readClaimableYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readGasParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readYieldConfiguration",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IBlast extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBlastInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimAllGas(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimAllYield(
      contractAddress: PromiseOrValue<string>,
      recipientOfYield: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimGas(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      gasToClaim: PromiseOrValue<BigNumberish>,
      gasSecondsToConsume: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimGasAtMinClaimRate(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      minClaimRateBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimMaxGas(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimYield(
      contractAddress: PromiseOrValue<string>,
      recipientOfYield: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configure(
      _yield: PromiseOrValue<BigNumberish>,
      gasMode: PromiseOrValue<BigNumberish>,
      governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configureAutomaticYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configureAutomaticYieldOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configureClaimableGas(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configureClaimableGasOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configureClaimableYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configureClaimableYieldOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configureContract(
      contractAddress: PromiseOrValue<string>,
      _yield: PromiseOrValue<BigNumberish>,
      gasMode: PromiseOrValue<BigNumberish>,
      governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configureGovernor(
      _governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configureGovernorOnBehalf(
      _newGovernor: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configureVoidGas(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configureVoidGasOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configureVoidYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    configureVoidYieldOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    readClaimableYield(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    readGasParams(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        etherSeconds: BigNumber;
        etherBalance: BigNumber;
        lastUpdated: BigNumber;
      }
    >;

    readYieldConfiguration(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;
  };

  claimAllGas(
    contractAddress: PromiseOrValue<string>,
    recipientOfGas: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimAllYield(
    contractAddress: PromiseOrValue<string>,
    recipientOfYield: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimGas(
    contractAddress: PromiseOrValue<string>,
    recipientOfGas: PromiseOrValue<string>,
    gasToClaim: PromiseOrValue<BigNumberish>,
    gasSecondsToConsume: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimGasAtMinClaimRate(
    contractAddress: PromiseOrValue<string>,
    recipientOfGas: PromiseOrValue<string>,
    minClaimRateBips: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimMaxGas(
    contractAddress: PromiseOrValue<string>,
    recipientOfGas: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimYield(
    contractAddress: PromiseOrValue<string>,
    recipientOfYield: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configure(
    _yield: PromiseOrValue<BigNumberish>,
    gasMode: PromiseOrValue<BigNumberish>,
    governor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configureAutomaticYield(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configureAutomaticYieldOnBehalf(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configureClaimableGas(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configureClaimableGasOnBehalf(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configureClaimableYield(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configureClaimableYieldOnBehalf(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configureContract(
    contractAddress: PromiseOrValue<string>,
    _yield: PromiseOrValue<BigNumberish>,
    gasMode: PromiseOrValue<BigNumberish>,
    governor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configureGovernor(
    _governor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configureGovernorOnBehalf(
    _newGovernor: PromiseOrValue<string>,
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configureVoidGas(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configureVoidGasOnBehalf(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configureVoidYield(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  configureVoidYieldOnBehalf(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  readClaimableYield(
    contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  readGasParams(
    contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number] & {
      etherSeconds: BigNumber;
      etherBalance: BigNumber;
      lastUpdated: BigNumber;
    }
  >;

  readYieldConfiguration(
    contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    claimAllGas(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimAllYield(
      contractAddress: PromiseOrValue<string>,
      recipientOfYield: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimGas(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      gasToClaim: PromiseOrValue<BigNumberish>,
      gasSecondsToConsume: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimGasAtMinClaimRate(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      minClaimRateBips: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimMaxGas(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimYield(
      contractAddress: PromiseOrValue<string>,
      recipientOfYield: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    configure(
      _yield: PromiseOrValue<BigNumberish>,
      gasMode: PromiseOrValue<BigNumberish>,
      governor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    configureAutomaticYield(overrides?: CallOverrides): Promise<void>;

    configureAutomaticYieldOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    configureClaimableGas(overrides?: CallOverrides): Promise<void>;

    configureClaimableGasOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    configureClaimableYield(overrides?: CallOverrides): Promise<void>;

    configureClaimableYieldOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    configureContract(
      contractAddress: PromiseOrValue<string>,
      _yield: PromiseOrValue<BigNumberish>,
      gasMode: PromiseOrValue<BigNumberish>,
      governor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    configureGovernor(
      _governor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    configureGovernorOnBehalf(
      _newGovernor: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    configureVoidGas(overrides?: CallOverrides): Promise<void>;

    configureVoidGasOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    configureVoidYield(overrides?: CallOverrides): Promise<void>;

    configureVoidYieldOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    readClaimableYield(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readGasParams(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number] & {
        etherSeconds: BigNumber;
        etherBalance: BigNumber;
        lastUpdated: BigNumber;
      }
    >;

    readYieldConfiguration(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    claimAllGas(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimAllYield(
      contractAddress: PromiseOrValue<string>,
      recipientOfYield: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimGas(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      gasToClaim: PromiseOrValue<BigNumberish>,
      gasSecondsToConsume: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimGasAtMinClaimRate(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      minClaimRateBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimMaxGas(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimYield(
      contractAddress: PromiseOrValue<string>,
      recipientOfYield: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configure(
      _yield: PromiseOrValue<BigNumberish>,
      gasMode: PromiseOrValue<BigNumberish>,
      governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configureAutomaticYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configureAutomaticYieldOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configureClaimableGas(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configureClaimableGasOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configureClaimableYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configureClaimableYieldOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configureContract(
      contractAddress: PromiseOrValue<string>,
      _yield: PromiseOrValue<BigNumberish>,
      gasMode: PromiseOrValue<BigNumberish>,
      governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configureGovernor(
      _governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configureGovernorOnBehalf(
      _newGovernor: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configureVoidGas(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configureVoidGasOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configureVoidYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    configureVoidYieldOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    readClaimableYield(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readGasParams(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    readYieldConfiguration(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimAllGas(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimAllYield(
      contractAddress: PromiseOrValue<string>,
      recipientOfYield: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimGas(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      gasToClaim: PromiseOrValue<BigNumberish>,
      gasSecondsToConsume: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimGasAtMinClaimRate(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      minClaimRateBips: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimMaxGas(
      contractAddress: PromiseOrValue<string>,
      recipientOfGas: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimYield(
      contractAddress: PromiseOrValue<string>,
      recipientOfYield: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configure(
      _yield: PromiseOrValue<BigNumberish>,
      gasMode: PromiseOrValue<BigNumberish>,
      governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configureAutomaticYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configureAutomaticYieldOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configureClaimableGas(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configureClaimableGasOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configureClaimableYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configureClaimableYieldOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configureContract(
      contractAddress: PromiseOrValue<string>,
      _yield: PromiseOrValue<BigNumberish>,
      gasMode: PromiseOrValue<BigNumberish>,
      governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configureGovernor(
      _governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configureGovernorOnBehalf(
      _newGovernor: PromiseOrValue<string>,
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configureVoidGas(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configureVoidGasOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configureVoidYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    configureVoidYieldOnBehalf(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    readClaimableYield(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readGasParams(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readYieldConfiguration(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
